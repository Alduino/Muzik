stages:
  - build
  - test
  - upload
  - release

variables:
    PACKAGE_VERSION: $CI_COMMIT_TAG
    PACKAGE_APPIMAGE: "Muzik-${PACKAGE_VERSION}.AppImage"
    PACKAGE_TARGZ: "muzik-desktop-${PACKAGE_VERSION}.tar.gz"
    PACKAGE_RPM: "muzik-desktop-${PACKAGE_VERSION}.x86_64.rpm"
    PACKAGE_DEB: "muzik-desktop-${PACKAGE_VERSION}_amd64.deb"
    PACKAGE_EXE: "Muzik Setup ${PACKAGE_VERSION}.exe"
    PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/muzik-desktop/${PACKAGE_VERSION}"

linux-build:
    image: node
    stage: build
    before_script:
        - curl -f https://get.pnpm.io/v6.7.js | node - add --global pnpm@6
        - pnpm config set store-dir .pnpm-store
    script:
        - pnpm i
        - pnpm run r:build
    cache:
        key: "$CI_COMMIT_REF_SLUG"
        paths:
            - .pnpm-store
    artifacts:
        when: on_success
        expire_in: 1 hour
        paths:
            - "apps/desktop/dist/${PACKAGE_APPIMAGE}"
            - "apps/desktop/dist/${PACKAGE_TARGZ}"
            - "apps/desktop/dist/${PACKAGE_RPM}"
            - "apps/desktop/dist/${PACKAGE_DEB}"
#    rules:
#        - if: $CI_COMMIT_TAG

windows-build:
    stage: build
    before_script:
        - $ErrorActionPreference = "Stop"
        - choco upgrade nodejs --yes --no-progress
        - choco install python3 --yes --no-progress
        - (Invoke-WebRequest 'https://get.pnpm.io/v6.7.js' -UseBasicParsing).Content | node - add --global pnpm
        - pnpm config set store-dir .pnpm-store
    script:
        - pnpm i
        - pnpm run r:build
    cache:
        key: "$CI_COMMIT_REF_SLUG"
        paths:
            - .pnpm-store
    artifacts:
        when: on_success
        expire_in: 1 hour
        paths:
            - "apps/desktop/dist/${PACKAGE_EXE}"
    tags:
        - windows
#    rules:
#        - if: $CI_COMMIT_TAG

lint:
    image: ianwalter/pnpm
    stage: test
    script:
        - pnpm i -w
        - pnpm run lint

upload:
    stage: upload
    image: curlimages/curl:latest
#    rules:
#        - if: $CI_COMMIT_TAG
    script:
        - 'curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file apps/desktop/dist/${PACKAGE_APPIMAGE} ${PACKAGE_REGISTRY_URL}/${PACKAGE_APPIMAGE}'
        - 'curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file apps/desktop/dist/${PACKAGE_TARGZ} ${PACKAGE_REGISTRY_URL}/${PACKAGE_TARGZ}'
        - 'curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file apps/desktop/dist/${PACKAGE_RPM} ${PACKAGE_REGISTRY_URL}/${PACKAGE_RPM}'
        - 'curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file apps/desktop/dist/${PACKAGE_DEB} ${PACKAGE_REGISTRY_URL}/${PACKAGE_DEB}'
        - 'curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file apps/desktop/dist/${PACKAGE_EXE} ${PACKAGE_REGISTRY_URL}/${PACKAGE_EXE}'

release:
    image: registry.gitlab.com/gitlab-org/release-cli:latest
    stage: release
    script:
        - echo "Creating release for $CI_TAG_NAME"
#    rules:
#        - if: $CI_COMMIT_TAG
    release:
        name: "Muzik v$CI_TAG_NAME"
        description: "$CI_COMMIT_DESCRIPTION"
        tag_name: "$CI_COMMIT_TAG"
        ref: "$CI_COMMIT_TAG"
        assets:
            links:
                - name: "muzik.appimage"
                  url: "${PACKAGE_REGISTRY_URL}/${PACKAGE_APPIMAGE}"
                - name: "muzik.tar.gz"
                  url: "${PACKAGE_REGISTRY_URL}/${PACKAGE_TARGZ}"
                - name: "muzik.rpm"
                  url: "${PACKAGE_REGISTRY_URL}/${PACKAGE_RPM}"
                - name: "muzik.deb"
                  url: "${PACKAGE_REGISTRY_URL}/${PACKAGE_DEB}"
                - name: "muzik-installer.exe"
                  url: "${PACKAGE_REGISTRY_URL}/${PACKAGE_EXE}"
