stages:
  - build
  - test
  - upload
  - release

variables:
    PACKAGE_APPIMAGE: "Muzik-${CI_COMMIT_TAG}.AppImage"
    PACKAGE_TARGZ: "muzik-desktop-${CI_COMMIT_TAG}.tar.gz"
    PACKAGE_RPM: "muzik-desktop-${CI_COMMIT_TAG}.x86_64.rpm"
    PACKAGE_DEB: "muzik-desktop_${CI_COMMIT_TAG}_amd64.deb"
    PACKAGE_EXE: "Muzik Setup ${CI_COMMIT_TAG}.exe"
    PACKAGE_REGISTRY_URL: "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/muzik-desktop/${CI_COMMIT_TAG}"

before_script:
    - export PACKAGE_FILENAME="$PACKAGE_REGISTRY_URL/muzik_$CI_COMMIT_TAG"

linux-build:
    image: node
    stage: build
    before_script:
        - apt update -y
        - apt install rpm -y
        - curl -f https://get.pnpm.io/v6.7.js | node - add --global pnpm@6
        - pnpm config set store-dir .pnpm-store
    script:
        - pnpm i
        - pnpm run r:build
    artifacts:
        when: on_success
        expire_in: 1 hour
        paths:
            - "apps/desktop/dist/${PACKAGE_APPIMAGE}"
            - "apps/desktop/dist/${PACKAGE_TARGZ}"
            - "apps/desktop/dist/${PACKAGE_RPM}"
            - "apps/desktop/dist/${PACKAGE_DEB}"
    rules:
        - if: $CI_COMMIT_TAG

windows-build:
    stage: build
    before_script:
        - $ErrorActionPreference = "Stop"
        - choco upgrade nodejs --yes --no-progress
        - choco install python3 --yes --no-progress
        - (Invoke-WebRequest 'https://get.pnpm.io/v6.7.js' -UseBasicParsing).Content | node - add --global pnpm
        - pnpm config set store-dir .pnpm-store
    script:
        - pnpm i
        - pnpm run r:build
    artifacts:
        when: on_success
        expire_in: 1 hour
        paths:
            - "apps/desktop/dist/${PACKAGE_EXE}"
    tags:
        - windows
    rules:
        - if: $CI_COMMIT_TAG

# TODO: Make linting work without building first
#lint:
#    image: node
#    stage: test
#    before_script:
#        - curl -f https://get.pnpm.io/v6.7.js | node - add --global pnpm@6
#        - pnpm config set store-dir .pnpm-store
#    script:
#        - pnpm i
#        - pnpm run lint
#    cache:
#        key: "$CI_COMMIT_REF_SLUG"
#        paths:
#            - .pnpm-store

upload:
    stage: upload
    image: curlimages/curl:latest
    rules:
        - if: $CI_COMMIT_TAG
    script:
        - 'curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file apps/desktop/dist/$PACKAGE_APPIMAGE "$PACKAGE_FILENAME.appimage"'
        - 'curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file apps/desktop/dist/$PACKAGE_TARGZ "$PACKAGE_FILENAME.tar.gz"'
        - 'curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file apps/desktop/dist/$PACKAGE_RPM "$PACKAGE_FILENAME.rpm"'
        - 'curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file apps/desktop/dist/$PACKAGE_DEB "$PACKAGE_FILENAME.deb"'
        - 'curl --header "JOB-TOKEN: ${CI_JOB_TOKEN}" --upload-file "apps/desktop/dist/$PACKAGE_EXE" "$PACKAGE_FILENAME.exe"'

release:
    image: registry.gitlab.com/gitlab-org/release-cli:latest
    stage: release
    script:
        - 'echo "Creating release for $CI_COMMIT_TAG: $CI_COMMIT_DESCRIPTION"'
        - echo "Files will be served from $PACKAGE_FILENAME.{exe,appimage,tar.gz,deb,rpm}"
        - |
            release-cli create --name "Muzik v$CI_COMMIT_TAG" --description release-notes.md --tag-name $CI_COMMIT_TAG \
                --assets-link "{\"name\":\"Windows (.exe)\",\"url\":\"$PACKAGE_FILENAME.exe\"}" \
                --assets-link "{\"name\":\"Generic Linux (.appimage)\",\"url\":\"$PACKAGE_FILENAME.appimage\"}" \
                --assets-link "{\"name\":\"Generic Linux (.tar.gz)\",\"url\":\"$PACKAGE_FILENAME.tar.gz\"}" \
                --assets-link "{\"name\":\"Ubuntu/Debian x64 (.deb)\",\"url\":\"$PACKAGE_FILENAME.deb\"}" \
                --assets-link "{\"name\":\"Fedora/Red Hat x86_64 (.rpm)\",\"url\":\"$PACKAGE_FILENAME.rpm\"}"
    rules:
        - if: $CI_COMMIT_TAG
